openapi: 3.0.0
info:
  title: API Daftar Film Favorit
  description: |
    ## ðŸŽ¬ API untuk Manajemen Film Favorit
    - Autentikasi JWT
    - Rate Limiting (10 requests/15 menit)
    - MySQL Database
  version: 1.0.0


servers:
  - url: http://localhost:5000/api
    description: Development Server
  - url: https://api-film-favorit.herokuapp.com/api
    description: Production Server

tags:
  - name: Auth
    description: Operasi autentikasi user
  - name: Films
    description: Manajemen data film
  - name: Favorites
    description: Manajemen film favorit user

paths:
  /auth/register:
    post:
      tags: [Auth]
      summary: Register user baru
      operationId: registerUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [nama, email, password]
              properties:
                nama:
                  type: string
                  example: "John Doe"
                  minLength: 3
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                password:
                  type: string
                  format: password
                  minLength: 6
                  example: "password123"
      responses:
        201:
          description: User berhasil terdaftar
          # content:
          #   application/json:
          #     schema:
          #       type: object
          #       properties:
          #         success:
          #           type: boolean
          #           example: true
          #         token:
          #           type: string
          #           example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        400:
          description: Input tidak valid
          # content:
          #   application/json:
          #     schema:
          #       $ref: '#/components/schemas/ErrorResponse'
          #     example:
          #       success: false
          #       error: "Email sudah terdaftar"

  /auth/login:
    post:
      tags: [Auth]
      summary: Login user ( Coba Pilihan Admin atau User )
      operationId: loginUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required: [email, password]
              properties:
                email:
                  type: string
                  format: email
                password:
                  type: string
                  format: password
            examples:
              user:
                summary: Contoh user biasa
                value:
                  email: "ayu1@example.com"
                  password: "password1"
              admin:
                summary: Login admin
                value:
                  email: "admin@gmail.com"
                  password: "123"
      responses:
        200:
          description: Login berhasil
          # content:
          #   application/json:
          #     schema:
          #       type: object
          #       properties:
          #         success:
          #           type: boolean
          #           example: true
          #         token:
          #           type: string
          #           example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        401:
          description: Autentikasi gagal
          # content:
          #   application/json:
          #     schema:
          #       $ref: '#/components/schemas/ErrorResponse'
          #     example:
          #       success: false
          #       error: "Email atau password salah"

  /films:
    get:
      tags: [Films]
      summary: Dapatkan semua film
      operationId: getAllFilms
      responses:
        200:
          description: List film berhasil didapatkan
          # content:
          #   application/json:
          #     schema:
          #       type: object
          #       properties:
          #         success:
          #           type: boolean
          #           example: true
          #         data:
          #           type: array
          #           items:
          #             $ref: '#/components/schemas/Film'
    post:
      tags: [Films]
      summary: Tambah film baru (Admin only)
      operationId: createFilm
      security:
        - bearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilmInput'
      responses:
        201:
          description: Film berhasil ditambahkan
          # content:
          #   application/json:
          #     schema:
          #       type: object
          #       properties:
          #         success:
          #           type: boolean
          #           example: true
          #         data:
          #           $ref: '#/components/schemas/Film'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /films/{id}:
    get:
      tags: [Films]
      summary: Dapatkan detail film
      operationId: getFilmById
      parameters:
        - $ref: '#/components/parameters/FilmIdParam'
      responses:
        200:
          description: Detail film berhasil didapatkan
          # content:
          #   application/json:
          #     schema:
          #       type: object
          #       properties:
          #         success:
          #           type: boolean
          #           example: true
          #         data:
          #           $ref: '#/components/schemas/Film'
        404:
          $ref: '#/components/responses/NotFoundError'
    put:
      tags: [Films]
      summary: Update film (Admin only)
      operationId: updateFilm
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/FilmIdParam'
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FilmInput'
      responses:
        200:
          description: Film berhasil diupdate
          # content:
          #   application/json:
          #     schema:
          #       type: object
          #       properties:
          #         success:
          #           type: boolean
          #           example: true
          #         data:
          #           $ref: '#/components/schemas/Film'
        400:
          $ref: '#/components/responses/ValidationError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          description: Forbidden (bukan admin)
          # content:
          #   application/json:
          #     schema:
          #       $ref: '#/components/schemas/ErrorResponse'
          #     example:
          #       success: false
          #       error: "Hanya admin yang bisa mengedit film"
        404:
          $ref: '#/components/responses/NotFoundError'

  /favorites:
    get:
      tags: [Favorites]
      summary: Dapatkan daftar favorit user yang sedang login
      operationId: getUserFavorites
      security:
        - bearerAuth: []
      responses:
        200:
          description: Daftar favorit berhasil didapatkan
          # content:
          #   application/json:
          #     schema:
          #       type: object
          #       properties:
          #         success:
          #           type: boolean
          #           example: true
          #         data:
          #           type: array
          #           items:
          #             $ref: '#/components/schemas/Film'
        401:
          $ref: '#/components/responses/UnauthorizedError'

  /favorites/{filmId}:
    post:
      tags: [Favorites]
      summary: Tambah film ke favorit (user yang sedang login)
      operationId: addFavorite
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/FilmIdParam'
      responses:
        200:
          description: Film berhasil ditambahkan ke favorit
          # content:
          #   application/json:
          #     schema:
          #       type: object
          #       properties:
          #         success:
          #           type: boolean
          #           example: true
          #         data:
          #           $ref: '#/components/schemas/Film'
        400:
          description: Film sudah ada di favorit
          # content:
          #   application/json:
          #     schema:
          #       $ref: '#/components/schemas/ErrorResponse'
          #     example:
          #       success: false
          #       error: "Film sudah ada di daftar favorit"
        401:
          $ref: '#/components/responses/UnauthorizedError'
    delete:
      tags: [Favorites]
      summary: Hapus film dari favorit
      operationId: removeFavorite
      security:
        - bearerAuth: []
      parameters:
        - $ref: '#/components/parameters/FilmIdParam'
      responses:
        200:
          description: Film berhasil dihapus dari favorit
          # content:
          #   application/json:
          #     schema:
          #       type: object
          #       properties:
          #         success:
          #           type: boolean
          #           example: true
          #         data:
          #           type: object
        400:
          description: Film tidak ada di favorit
          # content:
          #   application/json:
          #     schema:
          #       $ref: '#/components/schemas/ErrorResponse'
          #     example:
          #       success: false
          #       error: "Film tidak ada di daftar favorit"
        401:
          $ref: '#/components/responses/UnauthorizedError'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: Masukkan token JWT dengan format "Bearer <token>"

  schemas:
    User:
      type: object
      properties:
        id:
          type: integer
        nama:
          type: string
        email:
          type: string
        role:
          type: string
          enum: [user, admin]
          default: user
      required: [id, nama, email, role]

    Film:
      type: object
      properties:
        id:
          type: integer
          example: 1
        judul:
          type: string
          example: "Inception"
        sutradara:
          type: string
          example: "Christopher Nolan"
        tahun:
          type: integer
          example: 2010
        genre:
          type: array
          items:
            type: string
          example: ["Sci-Fi", "Action"]
        rating:
          type: number
          format: float
          minimum: 0
          maximum: 10
          example: 8.8
        created_at:
          type: string
          format: date-time
      required: [id, judul, sutradara, tahun, genre]

    FilmInput:
      type: object
      properties:
        judul:
          type: string
          example: "The Dark Knight"
          minLength: 1
        sutradara:
          type: string
          example: "Christopher Nolan"
          minLength: 3
        tahun:
          type: integer
          example: 2008
          minimum: 1900
          maximum: 2023
        genre:
          type: array
          items:
            type: string
          example: ["Action", "Crime", "Drama"]
          minItems: 1
        rating:
          type: number
          format: float
          minimum: 0
          maximum: 10
          example: 9.0
      required: [judul, sutradara, tahun, genre]

    ErrorResponse:
      type: object
      properties:
        success:
          type: boolean
          example: false
        error:
          type: string
          example: "Error message"
      required: [success, error]

  parameters:
    FilmIdParam:
      name: id
      in: path
      description: ID film
      required: true
      schema:
        type: integer
        example: 1

  responses:
    UnauthorizedError:
      description: Tidak memiliki akses
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Token tidak valid"

    NotFoundError:
      description: Data tidak ditemukan
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Film tidak ditemukan"

    ValidationError:
      description: Input tidak valid
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
          example:
            success: false
            error: "Tahun harus antara 1900-2023"